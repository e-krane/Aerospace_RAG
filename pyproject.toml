[project]
name = "aerospace-rag"
version = "0.1.0"
description = "Production-ready RAG system optimized for LaTeX technical documentation with mathematical equations"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "Apache-2.0"}
authors = [
    {name = "Erik", email = "erik@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Document Processing
    "docling>=2.0.0",
    "marker-pdf>=0.3.0",
    "pypdf>=4.0.0",

    # Vector Database
    "qdrant-client>=1.11.0",

    # Embeddings & Models
    "sentence-transformers>=3.0.0",
    "transformers>=4.40.0",
    "torch>=2.3.0",
    "accelerate>=0.29.0",

    # Chunking
    "semchunk>=2.0.0",
    "spacy>=3.7.0",

    # Retrieval
    "rank-bm25>=0.2.2",

    # LLM Integration
    "openai>=1.30.0",
    "anthropic>=0.25.0",

    # Evaluation
    "ragas>=0.1.0",
    "deepeval>=0.21.0",

    # Monitoring
    "langfuse>=2.0.0",

    # Utilities
    "pydantic>=2.7.0",
    "pyyaml>=6.0",
    "redis>=5.0.0",
    "tqdm>=4.66.0",
    "loguru>=0.7.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "black>=24.0.0",
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "ipython>=8.18.0",
]

viz = [
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "plotly>=5.20.0",
    "umap-learn>=0.5.5",
    "scikit-learn>=1.4.0",
]

notebooks = [
    "jupyter>=1.0.0",
    "ipykernel>=6.29.0",
    "jupyterlab>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/erik/Aerospace_RAG"
Repository = "https://github.com/erik/Aerospace_RAG"
Issues = "https://github.com/erik/Aerospace_RAG/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.mypy_cache
  | \.pytest_cache
  | __pycache__
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
